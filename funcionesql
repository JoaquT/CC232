1. Funciones de Cadenas de Texto
Funci√≥n	Descripci√≥n	Ejemplo
char_length(text)	Longitud del texto (en caracteres)	char_length('Hola') ‚Üí 4
length(text)	Igual que char_length	length('Hola') ‚Üí 4
lower(text)	Convierte a min√∫sculas	lower('HOLA') ‚Üí 'hola'
upper(text)	Convierte a may√∫sculas	upper('hola') ‚Üí 'HOLA'
substring(text, from, for)	Extrae parte del texto	substring('PostgreSQL', 1, 4) ‚Üí 'Post'
position(substr in str)	Posici√≥n de una subcadena	position('e' in 'verde') ‚Üí 4
trim([leading/trailing/both] chars from str)	Elimina caracteres	trim(' x ' from 'xxxHola x') ‚Üí 'Hola'
replace(text, buscar, reemplazo)	Reemplaza parte del texto	replace('carro', 'r', 'l') ‚Üí 'callo'
concat(a, b, ...)	Concatena cadenas	concat('Hola', ' ', 'Mundo') ‚Üí 'Hola Mundo'

2. Funciones Num√©ricas
Funci√≥n	Descripci√≥n	Ejemplo
abs(x)	Valor absoluto	abs(-5) ‚Üí 5
ceil(x) / ceiling(x)	Redondea hacia arriba	ceil(4.2) ‚Üí 5
floor(x)	Redondea hacia abajo	floor(4.8) ‚Üí 4
round(x, d)	Redondea con d decimales	round(3.14159, 2) ‚Üí 3.14
mod(a, b)	M√≥dulo (resto)	mod(10, 3) ‚Üí 1
power(a, b)	Potencia	power(2, 3) ‚Üí 8
sqrt(x)	Ra√≠z cuadrada	sqrt(16) ‚Üí 4
random()	N√∫mero aleatorio entre 0 y 1	random() ‚Üí 0.827

3. Funciones de Fecha y Hora
Funci√≥n	Descripci√≥n	Ejemplo
current_date	Fecha actual	current_date ‚Üí 2025-06-16
current_time	Hora actual	current_time ‚Üí 14:10:34
now()	Fecha y hora actual	now() ‚Üí 2025-06-16 14:10:34
age(timestamp)	Edad desde la fecha dada	age('2000-01-01') ‚Üí 25 years ...
extract(part from date)	Extrae partes de una fecha	extract(year from current_date) ‚Üí 2025
date_part('month', fecha)	Lo mismo que extract	date_part('month', '2025-06-01') ‚Üí 6
to_char(date, formato)	Formatea fecha como texto	to_char(now(), 'YYYY-MM-DD') ‚Üí '2025-06-16'

4. Otras Funciones √ötiles
Funci√≥n	Descripci√≥n	Ejemplo
coalesce(a, b, ...)	Retorna el primer valor no nulo	coalesce(null, 'default') ‚Üí 'default'
nullif(a, b)	Retorna NULL si a = b, sino a	nullif(5, 5) ‚Üí NULL
greatest(a, b, ...)	Mayor de varios valores	greatest(1, 5, 3) ‚Üí 5
least(a, b, ...)	Menor de varios valores	least(1, 5, 3) ‚Üí 1

CREATE DOMAIN fecha_formato_texto AS TEXT
CHECK (
  VALUE ~ '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
);
--TIMESTAMP PARA CFECHA Y HORA---EN ESTE FORMATO EJ: '2025-06-16 14:30:00'
CREATE DOMAIN fecha_hora_valida AS TIMESTAMP;







---FUNCIONES----
create table clientes(
ClienteId int,
NombreCliente varchar(40),
NombreContacto varchar(40),
Pais varchar(30)
);

insert into clientes values 
(10,'Alfreds Futterkiste','Maria Anders','Alemania'),
(20,'Ana Trujillo Emparedados y helados','Ana Trujillo','Mejico'),
(30,'Antonio Moreno Taquer√≠a','Antonio Moreno','Mejico');

select * from clientes;

create table pedidos(
PedidoId int,
ClienteId int,
fechaPedido date
);

insert into pedidos values
(10308,20,'2016-09-24'),
(10309,30,'2016-09-24'),
(10310,40,'2016-10-24'),
(10311,77,'2016-10-24');

select * from pedidos;

create table detalle_pedidos(
PedidoId int,
Correl int,
Producto text,
Cant int
);

insert into detalle_pedidos values
(10308,1,'Azucar domestica rubia Andahuasi',42),
(10308,2,'Arroz Coste√±o',73),
(10309,1,'Leche Vigor',85),
(10309,2,'Chocolate Sol del Cuzco',83),
(10309,3,'Sal de Maras',58);

select * from detalle_pedidos;

create or replace function Obtener_detalle(valor int)
returns void as $$
	select * from detalle_pedidos where PedidoId=valor;

$$ language 'sql';


--Ejecutando funcion
select * from Obtener_detalle(10308);



create function Obtener_detalle2(int) returns setof detalle_pedidos as $$
select * from detalle_pedidos where pedidoid=$1;

$$language 'sql';
create view datos as 
select * from Obtener_detalle2(10309) as tabla;

select * from datos;
------------------------------------------
--Seleccionar todos los clientes y cualquier pedido que puedan tener
create function Todos_ClientesyPedidos()
returns table( 
ClienteId int,
NombreCliente varchar(40),
PedidoId int,
fechaPedido date) as $$

select C.ClienteId,NombreCliente,PedidoId,fechaPedido from clientes c left join pedidos p on c.ClienteId=p.ClienteId
order by NombreCliente;
$$language 'sql';

select Todos_ClientesyPedidos() as tabla001;


create table tabla1 (
x int, y int
);

insert into tabla1 values
(1,2),(3,4),(5,6),(7,8);

select * from tabla1;

create function syp(x int,y int,out suma int,out prod int) as $$
select x+y,x*y;
$$ language 'sql';

select * from syp(11,42);

select * from tabla1;
create or replace function syp_con_tabla1(x int,out suma int,out prod int) as $$
select $1+tabla1.x,$1*tabla1.x from tabla1;
$$language 'sql';


create or replace function syp2_con_tabla2(x int,out suma int,out prod int) 
returns setof record
as $$
select $1+tabla1.x,$1*tabla1.x from tabla1;
$$language 'sql';


select * from syp_con_tabla1(10);
select * from syp2_con_tabla2(10);

SELECT current_database();

create function escribe()
returns numeric as $body$
select 24.0 
$body$ language 'sql';

select escribe();

create function sumar(n1 int,n2 int)
returns int as $$
select n1+n2
$$ language 'sql';

select sumar(350,750);

create function aCelsius(n1 real)
returns real as $$
select (n1-32)*5/9.0
$$ language 'sql';

select aCelsius(212);

create function concatena(text,text)
returns text as $$
select $1 ||' '|| $2
$$language 'sql';

select concatena('hola','mundo');

create function IGV(numeric)
returns numeric as $$
select ($1 * 0.18::numeric(8,2)) ::numeric(8,2);
$$ language 'sql';

select igv(100);

create table repuestos (
id int,
nombre varchar(60),
costo numeric(8,2),
peso numeric(8,2)
);

insert into repuestos values
(637,'cable',14.29,5),
(638,'martillo',25.46,8),
(639,'focos',7.35,32);

select * from repuestos;
select id,nombre,costo,igv(costo),costo+igv(costo) as total from repuestos order by id;

create function cargo(n1 numeric)
returns numeric as $$
select case 
	when n1<2 then cast (3.00 as numeric(8,2))
	when n1>=2 and n1<4 then cast (5.00 as numeric(8,2))
	when n1>=4 then cast (6.00 as numeric(8,2))
end;
$$ language 'sql';

select id,nombre,costo,igv(costo),costo+igv(costo) as subtotal,cargo(peso),costo+igv(costo)+cargo(peso) as total from repuestos order by id;

CREATE OR REPLACE FUNCTION saludar()
RETURNS void AS $$
BEGIN
  RAISE NOTICE '¬°Hola desde una funci√≥n!';
END;
$$ LANGUAGE plpgsql;

SELECT saludar();  -- Muestra: NOTICE:  ¬°Hola desde una funci√≥n!


------¬øQu√© es un Procedimiento Almacenado?-----
Un procedimiento almacenado es un bloque de c√≥digo SQL precompilado y almacenado en el servidor de base de datos, que se puede ejecutar m√∫ltiples veces con diferentes par√°metros.

üîπ Se diferencia de una funci√≥n en que:

Un procedimiento no necesariamente retorna un valor (puede retornar con OUT o no retornar nada).

Se usa m√°s para ejecutar acciones (como insertar, actualizar, borrar).

En PostgreSQL, los procedimientos como tal se declaran con CREATE PROCEDURE, desde la versi√≥n 11.

‚úÖ Ventajas de los Procedimientos Almacenados
Ventaja	Descripci√≥n
üîÅ Reutilizaci√≥n	Se puede llamar muchas veces desde diferentes aplicaciones.
üöÄ Rendimiento	El c√≥digo est√° precompilado, reduciendo el tiempo de ejecuci√≥n.
üõ° Seguridad	Se puede controlar el acceso a trav√©s del procedimiento en vez de directamente a la tabla.
üîÑ Mantenimiento	Si la l√≥gica cambia, solo se actualiza el procedimiento, no toda la app.

üîß Sintaxis b√°sica en PostgreSQL (desde v11)

CREATE PROCEDURE nombre_procedimiento(par√°metros)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Instrucciones SQL
END;
$$;
üìå Para ejecutar un procedimiento:


CALL nombre_procedimiento(argumentos);
üß† Ejemplo simple

CREATE PROCEDURE insertar_estudiante(
    IN pid INT,
    IN pnombre TEXT
)
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO estudiante(id, nombre) VALUES (pid, pnombre);
END;
$$;
Luego, lo llamas con:

CALL insertar_estudiante(101, 'Laura');
üîÅ Procedimientos con par√°metros OUT

CREATE PROCEDURE obtener_total_estudiantes(
    OUT total INT
)
LANGUAGE plpgsql
AS $$
BEGIN
    SELECT COUNT(*) INTO total FROM estudiante;
END;
$$;
